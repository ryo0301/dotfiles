if status is-interactive
  # global export
  set -gx EDITOR vim
  set -gx PAGER less


  # alias
  ## exa
  function ls
    exa -F $argv
  end

  function ll
    ls -l $argv
  end

  function l.
    ls -la $argv
  end

  function lt
    ls -T $argv
  end

  ## tree
  function tree
    command tree -aCF --dirsfirst --noreport $argv
  end


  # fish bind
  function peco_select_repo
    set -l path (ghq list | peco --select-1)
    if test -n "$path"
      cd (ghq root)"/$path"
      commandline -f repaint
    end
  end

  function peco_select_go
    set -l system_prefix (brew --prefix)
    set -l gover (command ls "$HOME/sdk/" | cat (echo system "($system_prefix/bin/go)" | psub) - | peco --select-1)
    if test -n "$gover"
      if ! test (string match -r "[0-9.]+" "$gover")
        set -f path "$system_prefix/bin/go"
      else if ! test -x "$HOME/sdk/$gover/bin/go"
        set -f path "$system_prefix/bin/go"
      else
        set -f path "$HOME/sdk/$gover/bin/go"
      end
      ln -sf $path "$HOME/bin/go"
    end
  end

  function fish_user_key_bindings
    ## plugin-peco
    bind \cr 'peco_select_history (commandline -b)'
    ## ghq
    bind \c] 'peco_select_repo'
  end


  # less
  set -gx LESS "-iMR"
  set -gx LESS_TERMCAP_mb \e'[01;35m'      # Begins blinking.
  set -gx LESS_TERMCAP_md \e'[01;35m'      # Begins bold.
  set -gx LESS_TERMCAP_me \e'[0m'          # Ends mode.
  set -gx LESS_TERMCAP_se \e'[0m'          # Ends standout-mode.
  set -gx LESS_TERMCAP_so \e'[00;47;30m'   # Begins standout-mode.
  set -gx LESS_TERMCAP_ue \e'[0m'          # Ends underline.
  set -gx LESS_TERMCAP_us \e'[01;34m'      # Begins underline.


  # git
  set __fish_git_prompt_showdirtystate 'yes'
  set __fish_git_prompt_showstashstate 'yes'
  set __fish_git_prompt_showuntrackedfiles 'yes'
  set __fish_git_prompt_showupstream 'auto'
  set __fish_git_prompt_color_branch yellow
  set __fish_git_prompt_color_upstream_ahead green
  set __fish_git_prompt_color_upstream_behind red

  #set __fish_git_prompt_char_dirtystate '*'
  #set __fish_git_prompt_char_stagedstate '+'
  #set __fish_git_prompt_char_invalidstate '#'
  #set __fish_git_prompt_char_stashstate '$'
  #set __fish_git_prompt_char_untrackedfiles '%'
  #set __fish_git_prompt_char_upstream_equal '='
  #set __fish_git_prompt_char_upstream_behind '<'
  #set __fish_git_prompt_char_upstream_ahead '>'
  #set __fish_git_prompt_char_upstream_diverged '<>'


  # fish
  set fish_greeting

  # fish-bd
  set -gx BD_OPT "insensitive"

  # homebrew
  if test -x "/opt/homebrew/bin/brew"
    eval (/opt/homebrew/bin/brew shellenv)
  end
  set -gx HOMEBREW_GITHUB_API_TOKEN (security find-generic-password -a $USER -s ghp.homebrew -w)

  # Go
  set -gx PATH (go env GOPATH)/bin $PATH

  # Java
  set -gx JAVA_HOME (/usr/libexec/java_home -v 17)

  # Rust
  if test -r "$HOME/.cargo/env"
    source "$HOME/.cargo/env"
  end

  # direnv
  direnv hook fish | source

  #volta
  set -gx VOLTA_HOME "$HOME/.volta"
  set -gx PATH "$VOLTA_HOME/bin" $PATH

  # rbenv
  rbenv init - | source

  # pyenv
  status is-login; and pyenv init --path | source
  pyenv init - | source

  # AWS
  complete -c aws -f -a '(begin; set -lx COMP_SHELL fish; set -lx COMP_LINE (commandline); aws_completer; end)'

  # OpenAI
  set -gx OPENAI_API_KEY (security find-generic-password -a $USER -s openai.apikey -w)

  set -gx PATH "$HOME/bin" $PATH
end
