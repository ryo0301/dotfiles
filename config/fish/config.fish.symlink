if status is-interactive
  # Amazon Q pre script
  if test -x ~/.local/bin/q
    eval (~/.local/bin/q init fish pre)
  end

  # global export
  set -gx EDITOR vim
  set -gx PAGER less


  # alias
  ## eza
  function ls
    eza -F $argv
  end

  function ll
    ls -l $argv
  end

  function l.
    ls -la $argv
  end

  function lt
    ls -T $argv
  end

  ## tree
  function tree
    command tree -aCF --dirsfirst --noreport $argv
  end


  # fish bind
  function __go_version_search
    set -l system_prefix (brew --prefix)
    set -l gover (command ls "$HOME/sdk/" | cat (echo system "($system_prefix/bin/go)" | psub) - | fzf --no-multi)
    if test -n "$gover"
      if ! test (string match -r "[0-9.]+" "$gover")
        set -f path "$system_prefix/bin/go"
      else if ! test -x "$HOME/sdk/$gover/bin/go"
        set -f path "$system_prefix/bin/go"
      else
        set -f path "$HOME/sdk/$gover/bin/go"
      end
      ln -sf $path "$HOME/bin/go"
      go version
    end
    commandline -f repaint
  end

  function __ghq_repository_search
    set -l opts '--preview=[ -r {}/README.md ]; and glow {}/README.md'
    ghq list --full-path | fzf $opts | read select
    [ -n "$select" ]; and cd "$select"
    commandline -f repaint
  end

  function fish_user_key_bindings
    bind \c] '__go_version_search'
    bind \cg '__ghq_repository_search'
  end


  # less
  set -gx LESS "-iMR"
  set -gx LESS_TERMCAP_mb \e'[01;35m'      # Begins blinking.
  set -gx LESS_TERMCAP_md \e'[01;35m'      # Begins bold.
  set -gx LESS_TERMCAP_me \e'[0m'          # Ends mode.
  set -gx LESS_TERMCAP_se \e'[0m'          # Ends standout-mode.
  set -gx LESS_TERMCAP_so \e'[00;47;30m'   # Begins standout-mode.
  set -gx LESS_TERMCAP_ue \e'[0m'          # Ends underline.
  set -gx LESS_TERMCAP_us \e'[01;34m'      # Begins underline.

  # git
  set __fish_git_prompt_showdirtystate 'yes'
  set __fish_git_prompt_showstashstate 'yes'
  set __fish_git_prompt_showuntrackedfiles 'yes'
  set __fish_git_prompt_showupstream 'auto'
  set __fish_git_prompt_color_branch yellow
  set __fish_git_prompt_color_upstream_ahead green
  set __fish_git_prompt_color_upstream_behind red

  #set __fish_git_prompt_char_dirtystate '*'
  #set __fish_git_prompt_char_stagedstate '+'
  #set __fish_git_prompt_char_invalidstate '#'
  #set __fish_git_prompt_char_stashstate '$'
  #set __fish_git_prompt_char_untrackedfiles '%'
  #set __fish_git_prompt_char_upstream_equal '='
  #set __fish_git_prompt_char_upstream_behind '<'
  #set __fish_git_prompt_char_upstream_ahead '>'
  #set __fish_git_prompt_char_upstream_diverged '<>'

  # fzf
  set -gx FZF_DEFAULT_OPTS '--height 50% --border sharp --reverse --cycle --no-mouse --color=border:blue,fg:252,bg:237,hl:4,fg+:231,bg+:24,hl+:1'


  # fish
  set fish_greeting

  # fish-bd
  set -gx BD_OPT "insensitive"

  # homebrew
  if test -x "/opt/homebrew/bin/brew"
    eval (/opt/homebrew/bin/brew shellenv)
  end
  set -gx HOMEBREW_GITHUB_API_TOKEN (security find-generic-password -a $USER -s ghp.homebrew -w)

  # Go
  fish_add_path (go env GOPATH)/bin

  # Java
  set -gx JAVA_HOME (/usr/libexec/java_home -v 17)

  # Rust
  if test -r "$HOME/.cargo/env"
    source "$HOME/.cargo/env"
  end

  # direnv
  direnv hook fish | source

  #volta
  set -gx VOLTA_HOME "$HOME/.volta"
  fish_add_path $VOLTA_HOME/bin

  # rbenv
  rbenv init - | source

  # pyenv
  status is-login; and pyenv init --path | source
  pyenv init - | source

  # AWS
  complete -c aws -f -a '(begin; set -lx COMP_SHELL fish; set -lx COMP_LINE (commandline); aws_completer; end)'

  # OpenAI
  set -gx OPENAI_API_KEY (security find-generic-password -a $USER -s openai.apikey -w)

  # user script
  fish_add_path -gP $HOME/bin

  # Amazon Q post script
  if test -x ~/.local/bin/q
    eval (~/.local/bin/q init fish post)
  end
end
